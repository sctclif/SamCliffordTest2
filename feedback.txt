Classes	and Inheritance	: Excellent selection of classes and inheritance - the common fields and methods have been put into the superclasses. It's a valid design choice to separate the UI code from the data code for each entity, but depending on the size and complexity of the application these could be in the same class to strengthen encapsulation and abstraction. I would try and find a better name for the UI superclass rather than including the word 'super' in the name, and I would make the draw method in the superclass abstract so that any future subclasses are forced to provide their own concrete implementation. I might make 'contactable' 'alertable'. To avoid code duplication, the call to LocationSystem.getCoords() could have been the superclass. 9/10 

Encapsulation : Mostly good access modifier selection with getters. There are some fields that have no modifier, which defaults to 'package private' which should be private - eg Keeper in KeeperMarker and all ArrayLists. 8/10


Polymorphism : Excellent use of polymorphism in drawing 10/10.


Exceptions and Error handling : LocationSystem Exception caught but the Exception is passed up to the top level rather than being handled gracefully with an error communicated to the user - ie if it cannot contact the LocationSystem, the program will crash. 3/10


Organization : Very good use of packages 10/10


Attempt : This is a very good attempt that works fully and correctly - excellent! 10/10


Flexibility for Future : Good use of ArrayLists would allow adding extra lions etc easily 10/10 


Alerts : Implemented 10/10

